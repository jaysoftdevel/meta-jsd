#include <signal.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <setjmp.h>
#include <pthread.h>

#define DELAY 10000

static int nextStep = 1;
static int nextDisp = 1;
static unsigned int delayStep = 1000000;
static unsigned int delayDisp = 3000000;
static unsigned int heartBeat = 1000;
static unsigned int beatStep=0;
static unsigned int beatDisp=0;
// threads
pthread_t tidStep;
pthread_t tidDisp;

void actHB_handler(int x) {
	beatStep+=heartBeat;
	beatDisp+=heartBeat;
	if(beatStep>=delayStep){
		nextStep=1;
		beatStep=0;
	}
	if(beatStep>=delayDisp){
		nextDisp=1;
		beatDisp=0;
	}
	return;
}


void* threadStep(void* arg) {
	while (1) {
		if (nextStep) {
			printf("step\n");
			nextStep = 0;
		}
		// do stuff!!!!
		while (!nextStep) {
			//printf("not\n");
			usleep(100);
		}
	}
}

void* threadDisp(void* arg) {

	while (1) {
		if (nextDisp) {
			printf("disp\n");
			nextDisp = 0;
		}
		// do stuff!!!!
		while (!nextDisp) {
			//printf("not\n");
			usleep(100);
		}
	}
}

int main(int argc, char ** argv) {

	// creating and running stepper thread
	if (pthread_create(&tidStep, NULL, &threadStep, NULL) != 0) {
		printf("error creating thread\n");
		return -1;
	}
	// creating and running display thread
	if (pthread_create(&tidDisp, NULL, &threadDisp, NULL) != 0) {
		printf("error creating thread\n");
		return -1;
	}
	struct sigaction actHB;
	// display handler
	actHB.sa_handler = actHB_handler;
	actHB.sa_flags = SA_ONSTACK;
	sigaction(SIGALRM, &actHB, NULL);

	/* Set an alarm to go off after 1,000 microseconds (one thousandth
	 of a second). */
	printf("go\n");
	while (1) {
		ualarm(heartBeat, heartBeat);
		// do stuff!!!!
		while (1) {
			//printf("not\n");
			usleep(100);
		}
	}
	return 0;
}
