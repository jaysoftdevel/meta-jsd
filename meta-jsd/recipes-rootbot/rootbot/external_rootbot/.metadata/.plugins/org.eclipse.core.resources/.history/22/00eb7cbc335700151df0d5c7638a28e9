#include <stdio.h>
#include <unistd.h>

#include <prussdrv.h>
#include <pruss_intc_mapping.h>

#define DEBUG

static void *pruDataMem;
unsigned int *pruData;

/* function prototypes*/
int initPru1();
int deinitPru1();
int getDistancePRU1(char* pruBin);

int main(void) {
	initPru1();
#ifdef DEBUG
	printf("PRU MAIN: running binary\n");
#endif
	/* run pru asm */
	// Print the distance received from the sonar
	// At 20 degrees in dry air the speed of sound is 342.2 cm/sec
	// so it takes 29.12 us to make 1 cm, i.e. 58.44 us for a roundtrip of 1 cm
	printf("Distance_L = %.2f cm\n", (float) getDistancePRU1("hcsr04_FL.bin") / 58.44);
	usleep(100000);
	printf("Distance_C = %.2f cm\n", (float) getDistancePRU1("hcsr04_FC.bin") / 58.44);
	usleep(100000);
	printf("Distance_R = %.2f cm\n", (float) getDistancePRU1("hcsr04_FR.bin") / 58.44);
	usleep(100000);
	printf("Distance_L = %.2f cm\n", (float) getDistancePRU1("hcsr04_FL.bin") / 58.44);
	usleep(100000);
	printf("Distance_C = %.2f cm\n", (float) getDistancePRU1("hcsr04_FC.bin") / 58.44);
	usleep(100000);
	printf("Distance_R = %.2f cm\n", (float) getDistancePRU1("hcsr04_FR.bin") / 58.44);
	usleep(100000);
	printf("Distance_L = %.2f cm\n", (float) getDistancePRU1("hcsr04_FL.bin") / 58.44);
	usleep(100000);
	printf("Distance_C = %.2f cm\n", (float) getDistancePRU1("hcsr04_FC.bin") / 58.44);
	usleep(100000);
	printf("Distance_R = %.2f cm\n", (float) getDistancePRU1("hcsr04_FR.bin") / 58.44);
	deinitPru1();
#ifdef DEBUG
	printf("PRU MAIN: exit...\n");
#endif
	return (0);

}



int initPru1(){
#ifdef DEBUG
	printf("PRU INIT: enter init routine\n");
#endif
	tpruss_intc_initdata pruss_intc_initdata = PRUSS_INTC_INITDATA;
	prussdrv_init();
#ifdef DEBUG
	printf("PRU INIT: open driver\n");
#endif
	/* Open PRU Interrupt */
	if (prussdrv_open(PRU_EVTOUT_1)) {
		// Handle failure
		fprintf(stderr, ">> PRU open failed:\n");
		return 1;
	}
#ifdef DEBUG
	printf("PRU INIT: init interrupt\n");
#endif
	/* Get the interrupt initialized */
	prussdrv_pruintc_init(&pruss_intc_initdata);
#ifdef DEBUG
	printf("PRU INIT: map data memory\n");
#endif
	/* Get pointers to PRU local memory */
	prussdrv_map_prumem(PRUSS0_PRU1_DATARAM, &pruDataMem);
	pruData = (unsigned int *) pruDataMem;
#ifdef DEBUG
	printf("PRU INIT: leaving init routine\n");
#endif
	return (0);
}

int deinitPru1(){
	/* Disable PRU and close memory mapping*/
#ifdef DEBUG
	printf("PRU DEINIT: disable pru\n");
#endif
	prussdrv_pru_disable(1);
	prussdrv_exit();
	return (0);
}

int getDistancePRU1(char* pruBin) {
	/* binary on pru 1 */
#ifdef DEBUG
	printf("PRU ASM: in asm execution\n");
#endif
	prussdrv_exec_program(1, pruBin);
	/* Get measurements */
#ifdef DEBUG
	printf("PRU ASM: waiting for event\n");
#endif
	// Wait for the PRU interrupt
	prussdrv_pru_wait_event(PRU_EVTOUT_1);
#ifdef DEBUG
	printf("PRU ASM: clearing event\n");
#endif
	prussdrv_pru_clear_event(PRU_EVTOUT_1, PRU1_ARM_INTERRUPT);
#ifdef DEBUG
	printf("PRU ASM: leaving asm\n");
#endif
	return pruData[0];
}
