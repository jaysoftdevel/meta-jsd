#include <signal.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <setjmp.h>
#include <pthread.h>

#define DELAY 10000

static jmp_buf buf;
static int nextStep = 1;
static int nextDisp = 1;
static int delayStep = 10000, delayDisp = 100000, offset;
// threads
pthread_t tidStep;
pthread_t tidDisp;
//int pthread_create();


void signal_handler_step(int x) {
	printf("%d\n", delayStep);
	if (delayStep >= 600000) {
		offset = -50000;
	} else if (delayStep < 50001) {
		offset = 50000;
	}
	delayStep += offset;
	nextStep = 1;
	return;
}

void signal_handler_disp(int x) {
	printf("Display handler\n");
	nextDisp = 1;
	return;
}

void* threadStep(void* arg){
	while(1){
		usleep(1000000);
		printf("threadStep active\n");
	}
}

void* threadDisp(void* arg){
	while(1){
		usleep(1000000);
		printf("threadDisp active\n");
	}
}

int main(int argc, char ** argv) {
	struct sigaction actStep, actDisp;
	// stepper handler
	actStep.sa_handler = signal_handler_step;
	actStep.sa_flags = SA_RESTART;
	sigaction(SIGALRM, &actStep, NULL);
	// display handler
	actDisp.sa_handler = signal_handler_disp;
	actDisp.sa_flags = SA_RESTART;
	sigaction(SIGALRM, &actDisp, NULL);

	if(pthread_create(&tidStep,NULL,&threadStep,NULL)!=0){
		printf("error creating thread\n");
		return -1;
	}

	if(pthread_create(&tidDisp,NULL,&threadDisp,NULL)!=0){
			printf("error creating thread\n");
			return -1;
		}

	/* Set an alarm to go off after 1,000 microseconds (one thousandth
	 of a second). */
	printf("go\n");
	while (1) {
		if (nextStep) {
			printf("step\n");
			nextStep = 0;
			ualarm(delayStep, 0);
		}
		if (nextDisp) {
			printf("disp\n");
			nextDisp = 0;
			ualarm(delayDisp, 0);
		}
		// do stuff!!!!
		while (!nextStep || !nextDisp) {
			printf("not\n");
			usleep(100);
		}
	}
	return 0;
}
